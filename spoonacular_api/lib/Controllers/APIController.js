/**
 * SpoonacularAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/19/2017
 */

var _request = require('../Http/Client/RequestClient');
var _configuration = require('../configuration');
var _APIHelper = require('../APIHelper');

var APIController = {

    /**
     * Get information about a packaged food product.
     * @param {int} id    Required parameter: The id of the packaged food product.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    getProductInformation: function (id, callback) {
        //Assign default values
        id = id || 22347;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/food/products/{id}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "id": id
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Find recipes which are similar to the given one.
     * @param {int} id    Required parameter: The id of the source recipe to which similar recipes should be found.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    findSimilarRecipes: function (id, callback) {
        //Assign default values
        id = id || 156992;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/{id}/similar";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "id": id
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Autocomplete a search for an ingredient.
     * @param {string} query    Required parameter: The query - a partial or full ingredient name.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    getAutocompleteIngredientSearch: function (query, callback) {
        //Assign default values
        query = query || "appl";

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/food/ingredients/autocomplete";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "query": query
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Visualize the price breakdown of a recipe.
     * @param {string} ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param {int} servings    Required parameter: The number of servings.
     * @param {string|null} defaultCss    Optional parameter: Whether the widget should be styled with the default css.
     * @param {int|null} mode    Optional parameter: The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
     * @param {Dictionary} fieldParameters    Optional parameter: Additional optional form parameters are supported by this endpoint
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    createVisualizePriceBreakdown: function (ingredientList, servings, defaultCss, mode, fieldParameters, callback) {
        //Assign default values
        ingredientList = ingredientList || "3 oz flour";
        servings = servings || 2;
        defaultCss = defaultCss || "checked";
        mode = mode || 1;
        fieldParameters = fieldParameters || null;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/visualizePriceEstimator";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //prepare form data
        var _form = {
            "ingredientList": ingredientList,
            "servings": servings,
            "defaultCss": (null != defaultCss) ? defaultCss : "checked",
            "mode": (null != mode) ? mode : 1
        };

        //prepare optional form fields
        _APIHelper.merge(_form, fieldParameters)

        //Remove null values
        _APIHelper.cleanObject(_form);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            form : _form,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Visualize a recipe's nutritional information.
     * @param {string} ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param {int} servings    Required parameter: The number of servings.
     * @param {string|null} defaultCss    Optional parameter: Whether the ingredient list should be styled with the default css.
     * @param {Dictionary} fieldParameters    Optional parameter: Additional optional form parameters are supported by this endpoint
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    createVisualizeNutrition: function (ingredientList, servings, defaultCss, fieldParameters, callback) {
        //Assign default values
        ingredientList = ingredientList || "3 oz flour";
        servings = servings || 2;
        defaultCss = defaultCss || "checked";
        fieldParameters = fieldParameters || null;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/visualizeNutrition";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //prepare form data
        var _form = {
            "ingredientList": ingredientList,
            "servings": servings,
            "defaultCss": (null != defaultCss) ? defaultCss : "checked"
        };

        //prepare optional form fields
        _APIHelper.merge(_form, fieldParameters)

        //Remove null values
        _APIHelper.cleanObject(_form);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            form : _form,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Visualize ingredients of a recipe.
     * @param {string} ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param {int} servings    Required parameter: The initial number of servings.
     * @param {string|null} defaultCss    Optional parameter: Whether the ingredient list should be styled with the default css.
     * @param {string|null} measure    Optional parameter: The initial measure, either "metric" or "us".
     * @param {string|null} view    Optional parameter: The initial view, either "grid" or "list".
     * @param {Dictionary} fieldParameters    Optional parameter: Additional optional form parameters are supported by this endpoint
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    createVisualizeIngredients: function (ingredientList, servings, defaultCss, measure, view, fieldParameters, callback) {
        //Assign default values
        ingredientList = ingredientList || "3 oz flour";
        servings = servings || 2;
        defaultCss = defaultCss || "checked";
        measure = measure || "metric";
        view = view || "grid";
        fieldParameters = fieldParameters || null;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/visualizeIngredients";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //prepare form data
        var _form = {
            "ingredientList": ingredientList,
            "servings": servings,
            "defaultCss": (null != defaultCss) ? defaultCss : "checked",
            "measure": (null != measure) ? measure : "metric",
            "view": (null != view) ? view : "grid"
        };

        //prepare optional form fields
        _APIHelper.merge(_form, fieldParameters)

        //Remove null values
        _APIHelper.cleanObject(_form);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            form : _form,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Summarize the recipe in a short text.
     * @param {int} id    Required parameter: The id of the recipe that should be summarized.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    getSummarizeRecipe: function (id, callback) {
        //Assign default values
        id = id || 4632;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/{id}/summary";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "id": id
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Search packaged food products like frozen pizza and snickers bars.
     * @param {string} query    Required parameter: The search query.
     * @param {int|null} number    Optional parameter: The number of results to retrieve, defaults to 10.
     * @param {int|null} offset    Optional parameter: The number of results to skip, defaults to 0.
     * @param {Dictionary} queryParameters    Optional parameter: Additional optional query parameters are supported by this endpoint
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    searchGroceryProducts: function (query, number, offset, queryParameters, callback) {
        //Assign default values
        query = query || "snickers";
        number = number || 10;
        offset = offset || 0;
        queryParameters = queryParameters || null;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/food/products/search";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "query": query,
            "number": (null != number) ? number : 10,
            "offset": (null != offset) ? offset : 0
        });

        //append optional parameters to the query
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters)
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Answer a nutrition related natural language question.
     * @param {string} q    Required parameter: The nutrition-related question.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    getQuickAnswer: function (q, callback) {
        //Assign default values
        q = q || "How much vitamin c is in 2 apples?";

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/quickAnswer";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "q": q
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Get information about a recipe.
     * @param {int} id    Required parameter: The id of the recipe.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    getRecipeInformation: function (id, callback) {
        //Assign default values
        id = id || 156992;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/{id}/information";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "id": id
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Extract an ingredient from plain text.
     * @param {string} ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param {int} servings    Required parameter: The number of servings that you can make from the ingredients.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    createParseIngredients: function (ingredientList, servings, callback) {
        //Assign default values
        ingredientList = ingredientList || "3 oz pork shoulder";
        servings = servings || 2;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/parseIngredients";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //prepare form data
        var _form = {
            "ingredientList": ingredientList,
            "servings": servings
        };

        //Remove null values
        _APIHelper.cleanObject(_form);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            form : _form,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Map ingredients to food products.
     * @param {string} ingredientList    Required parameter: A new line-separated list of ingredients.
     * @param {int} servings    Required parameter: The number of servings this recipe makes.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    createMapIngredients: function (ingredientList, servings, callback) {
        //Assign default values
        ingredientList = ingredientList || "200g flour\\n3 eggs";
        servings = servings || 1;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/food/ingredients/map";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //prepare form data
        var _form = {
            "ingredientList": ingredientList,
            "servings": servings
        };

        //Remove null values
        _APIHelper.cleanObject(_form);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            form : _form,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Extract recipe data from a recipe blog or Web page.
     * @param {string} url    Required parameter: The URL of the recipe page.
     * @param {bool|null} forceExtraction    Optional parameter: If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower.
     * @param {Dictionary} queryParameters    Optional parameter: Additional optional query parameters are supported by this endpoint
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    getExtractRecipeFromWebsite: function (url, forceExtraction, queryParameters, callback) {
        //Assign default values
        url = url || "http://www.melskitchencafe.com/the-best-fudgy-brownies/";
        forceExtraction = forceExtraction || false;
        queryParameters = queryParameters || null;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/extract";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "url": url,
            "forceExtraction": (null != forceExtraction) ? forceExtraction : false
        });

        //append optional parameters to the query
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters)
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Compute a meal plan for a day.
     * @param {int} targetCalories    Required parameter: The target number of calories per day.
     * @param {string} timeFrame    Required parameter: For one day or a complete week, allowed values are "day" and "week".
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    getComputeDailyMealPlan: function (targetCalories, timeFrame, callback) {
        //Assign default values
        targetCalories = targetCalories || 2000;
        timeFrame = timeFrame || "day";

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/mealplans/generate";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "targetCalories": targetCalories,
            "timeFrame": timeFrame
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Given a set of product jsons, get back classified products.
     * @param {array} productJsonArray    Required parameter: A JSON Array of products.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    createClassifyGroceryProductsBatch: function (productJsonArray, callback) {

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/food/products/classifyBatch";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "content-type": "application/json; charset=utf-8",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Remove null values
        _APIHelper.cleanObject(productJsonArray);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            body : _APIHelper.jsonSerialize(productJsonArray),
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Classify the recipe's cuisine.
     * @param {string} ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param {string} title    Required parameter: The title of the recipe.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    createClassifyCuisine: function (ingredientList, title, callback) {
        //Assign default values
        ingredientList = ingredientList || "3 oz pork shoulder";
        title = title || "Pork roast with green beans";

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/cuisine";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //prepare form data
        var _form = {
            "ingredientList": ingredientList,
            "title": title
        };

        //Remove null values
        _APIHelper.cleanObject(_form);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            form : _form,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Given a grocery product title, this endpoint allows you to detect what basic ingredient it is.
     * @param {Productjson} productJson    Required parameter: The json representation of a product.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {Classifiedproduct}
     */
    createClassifyAGroceryProduct: function (productJson, callback) {

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/food/products/classify";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "content-type": "application/json; charset=utf-8",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Remove null values
        _APIHelper.cleanObject(productJson);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            body : _APIHelper.jsonSerialize(productJson),
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                parsed = new Classifiedproduct(parsed);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Search recipes in natural language.
     * @param {string} query    Required parameter: The (natural language) recipe search query.
     * @param {string|null} cuisine    Optional parameter: The cuisine(s) of the recipes. One or more (comma separated) of the following: african, chinese, japanese, korean, vietnamese, thai, indian, british, irish, french, italian, mexican, spanish, middle eastern, jewish, american, cajun, southern, greek, german, nordic, eastern european, caribbean, or latin american.
     * @param {string|null} diet    Optional parameter: The diet to which the recipes must be compliant. Possible values are: pescetarian, lacto vegetarian, ovo vegetarian, vegan, and vegetarian.
     * @param {string|null} excludeIngredients    Optional parameter: An comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
     * @param {string|null} intolerances    Optional parameter: A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. Possible values are: dairy, egg, gluten, peanut, sesame, seafood, shellfish, soy, sulfite, tree nut, and wheat.
     * @param {bool|null} limitLicense    Optional parameter: Whether the recipes should have an open license that allows for displaying with proper attribution.
     * @param {int|null} number    Optional parameter: The number of results to return (between 0 and 100).
     * @param {int|null} offset    Optional parameter: The number of results to skip (between 0 and 900).
     * @param {string|null} type    Optional parameter: The type of the recipes. One of the following: main course, side dish, dessert, appetizer, salad, bread, breakfast, soup, beverage, sauce, or drink.
     * @param {Dictionary} queryParameters    Optional parameter: Additional optional query parameters are supported by this endpoint
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    searchRecipes: function (query, cuisine, diet, excludeIngredients, intolerances, limitLicense, number, offset, type, queryParameters, callback) {
        //Assign default values
        query = query || "burger";
        cuisine = cuisine || "italian";
        diet = diet || "vegetarian";
        excludeIngredients = excludeIngredients || "coconut";
        intolerances = intolerances || "egg, gluten";
        limitLicense = limitLicense || false;
        number = number || 10;
        offset = offset || 0;
        type = type || "main course";
        queryParameters = queryParameters || null;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/search";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "query": query,
            "cuisine": (null != cuisine) ? cuisine : "italian",
            "diet": (null != diet) ? diet : "vegetarian",
            "excludeIngredients": (null != excludeIngredients) ? excludeIngredients : "coconut",
            "intolerances": (null != intolerances) ? intolerances : "egg, gluten",
            "limitLicense": (null != limitLicense) ? limitLicense : false,
            "number": (null != number) ? number : 10,
            "offset": (null != offset) ? offset : 0,
            "type": (null != type) ? type : "main course"
        });

        //append optional parameters to the query
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters)
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Find a set of recipes that adhere to the given nutrient limits. All the found recipes will have macro nutrients within the calories, protein, fat, and carbohydrate limits.
     * @param {int|null} maxcalories    Optional parameter: The maximum number of calories the recipe can have.
     * @param {int|null} maxcarbs    Optional parameter: The maximum number of carbohydrates in grams the recipe can have.
     * @param {int|null} maxfat    Optional parameter: The maximum number of fat in grams the recipe can have.
     * @param {int|null} maxprotein    Optional parameter: The maximum number of protein in grams the recipe can have.
     * @param {int|null} mincalories    Optional parameter: The minimum number of calories the recipe must have.
     * @param {int|null} minCarbs    Optional parameter: The minimum number of carbohydrates in grams the recipe must have.
     * @param {int|null} minfat    Optional parameter: The minimum number of fat in grams the recipe must have.
     * @param {int|null} minProtein    Optional parameter: The minimum number of protein in grams the recipe must have.
     * @param {Dictionary} queryParameters    Optional parameter: Additional optional query parameters are supported by this endpoint
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    findByNutrients: function (maxcalories, maxcarbs, maxfat, maxprotein, mincalories, minCarbs, minfat, minProtein, queryParameters, callback) {
        //Assign default values
        maxcalories = maxcalories || 1500;
        maxcarbs = maxcarbs || 100;
        maxfat = maxfat || 100;
        maxprotein = maxprotein || 100;
        mincalories = mincalories || 0;
        minCarbs = minCarbs || 0;
        minfat = minfat || 0;
        minProtein = minProtein || 0;
        queryParameters = queryParameters || null;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/findByNutrients";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "maxcalories": (null != maxcalories) ? maxcalories : 1500,
            "maxcarbs": (null != maxcarbs) ? maxcarbs : 100,
            "maxfat": (null != maxfat) ? maxfat : 100,
            "maxprotein": (null != maxprotein) ? maxprotein : 100,
            "mincalories": (null != mincalories) ? mincalories : 0,
            "minCarbs": (null != minCarbs) ? minCarbs : 0,
            "minfat": (null != minfat) ? minfat : 0,
            "minProtein": (null != minProtein) ? minProtein : 0
        });

        //append optional parameters to the query
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters)
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.
     * @param {string} ingredients    Required parameter: A comma-separated list of ingredients that the recipes should contain.
     * @param {bool|null} limitLicense    Optional parameter: Whether to only show recipes with an attribution license.
     * @param {int|null} number    Optional parameter: The maximal number of recipes to return (default = 5).
     * @param {int|null} ranking    Optional parameter: Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
     * @param {Dictionary} queryParameters    Optional parameter: Additional optional query parameters are supported by this endpoint
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {array}
     */
    findByIngredients: function (ingredients, limitLicense, number, ranking, queryParameters, callback) {
        //Assign default values
        ingredients = ingredients || "apples,flour,sugar";
        limitLicense = limitLicense || false;
        number = number || 5;
        ranking = ranking || 1;
        queryParameters = queryParameters || null;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/findByIngredients";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "ingredients": ingredients,
            "limitLicense": (null != limitLicense) ? limitLicense : false,
            "number": (null != number) ? number : 5,
            "ranking": (null != ranking) ? ranking : 1
        });

        //append optional parameters to the query
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters)
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                parsed = parsed.map(function(model){
                    return new FindByIngredientsModel(model);
                });
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Create a recipe card given a recipe.
     * @param {string} backgroundImage    Required parameter: The background image ("none","background1", or "background2").
     * @param {binary} image    Required parameter: The binary image of the recipe as jpg.
     * @param {string} ingredients    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param {string} instructions    Required parameter: The instructions to make the recipe. One step per line.
     * @param {string} mask    Required parameter: The mask to put over the recipe image ("ellipseMask", "diamondMask", "diamondMask", "starMask", "heartMask", "potMask", "fishMask").
     * @param {int} readyInMinutes    Required parameter: The number of minutes it takes to get the recipe on the table.
     * @param {int} servings    Required parameter: The number of servings that you can make from the ingredients.
     * @param {string} title    Required parameter: The title of the recipe.
     * @param {string|null} author    Optional parameter: The author of the recipe.
     * @param {string|null} backgroundColor    Optional parameter: The background color on the recipe card as a hex-string.
     * @param {string|null} fontColor    Optional parameter: The font color on the recipe card as a hex-string.
     * @param {string|null} source    Optional parameter: The source of the recipe.
     * @param {Dictionary} fieldParameters    Optional parameter: Additional optional form parameters are supported by this endpoint
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    createRecipeCard: function (backgroundImage, image, ingredients, instructions, mask, readyInMinutes, servings, title, author, backgroundColor, fontColor, source, fieldParameters, callback) {
        //Assign default values
        backgroundImage = backgroundImage || "background1";
        image = image || The image.;
        ingredients = ingredients || "2 cups of green beans";
        instructions = instructions || "cook the beans";
        mask = mask || "ellipseMask";
        readyInMinutes = readyInMinutes || 60;
        servings = servings || 2;
        title = title || "Pork tenderloin with green beans";
        author = author || "Emily Henderson";
        backgroundColor = backgroundColor || "#ffffff";
        fontColor = fontColor || "#333333";
        source = source || "spoonacular.com";
        fieldParameters = fieldParameters || null;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/recipes/visualizeRecipe";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "X-Mashape-Key": _configuration.xMashapeKey
        };

        //prepare form data
        var _form = {
            "backgroundImage": backgroundImage,
            "image": image,
            "ingredients": ingredients,
            "instructions": instructions,
            "mask": mask,
            "readyInMinutes": readyInMinutes,
            "servings": servings,
            "title": title,
            "author": (null != author) ? author : "Emily Henderson",
            "backgroundColor": (null != backgroundColor) ? backgroundColor : "#ffffff",
            "fontColor": (null != fontColor) ? fontColor : "#333333",
            "source": (null != source) ? source : "spoonacular.com"
        };

        //prepare optional form fields
        _APIHelper.merge(_form, fieldParameters)

        //Remove null values
        _APIHelper.cleanObject(_form);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            form : _form,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    }

};

module.exports = APIController;